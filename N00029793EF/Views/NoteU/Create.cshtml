@{ Layout = null;    var nota = (Note)Model;}<form id="createNota" onsubmit="guardar(event)" action="/NotaU/Create" enctype="multipart/form-data" method="post">    <div class="form-group">        <input type="text" class="form-control" name="Titulo" placeholder="Titulo" value="@Model.Titulo" />        @Html.ValidationMessage("Titulo")    </div>    <div class="form-group">        <textarea class="form-control" id="text" name="Contenido"></textarea>        @Html.ValidationMessage("Cuerpo")    </div>    <div class="form-group">        <label>            <strong>                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-tag-fill" fill="currentColor" xmlns="http://www.w3.org/2000/svg">                    <path fill-rule="evenodd" d="M2 1a1 1 0 0 0-1 1v4.586a1 1 0 0 0 .293.707l7 7a1 1 0 0 0 1.414 0l4.586-4.586a1 1 0 0 0 0-1.414l-7-7A1 1 0 0 0 6.586 1H2zm4 3.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z" />                </svg>Etiquetas            </strong>        </label>        @foreach (var item in ViewBag.Etiquetas)        {<div class="form-check form-check">    <input name="tag" class="form-check-input" type="checkbox" id="inlineCheckbox1" value="@item.Id">    <label class="form-check-label" for="inlineCheckbox1">@item.Nombre</label></div>}        @Html.ValidationMessage("Etiqueta")    </div></form><script type='text/javascript'>    var simplemde = new SimpleMDE({        autofocus: true,                blockStyles: {            bold: "__",            italic: "_"        },        element: document.getElementById("text"),        forceSync: true,        hideIcons: ["guide", "heading"],        indentWithTabs: false,                insertTexts: {            horizontalRule: ["", "\n\n-----\n\n"],            image: ["![](http://", ")"],            link: ["[", "](http://)"],            table: ["", "\n\n| Column 1 | Column 2 | Column 3 |\n| -------- | -------- | -------- |\n| Text     | Text      | Text     |\n\n"],        },        lineWrapping: false,        parsingConfig: {            allowAtxHeaderWithoutSpace: true,            strikethrough: false,            underscoresBreakWords: true,        },        placeholder: "Type here...",        previewRender: function (plainText) {            return customMarkdownParser(plainText); // Returns HTML from a custom parser        },        previewRender: function (plainText, preview) { // Async method            setTimeout(function () {                preview.innerHTML = customMarkdownParser(plainText);            }, 250);            return "Loading...";        },        promptURLs: true,        renderingConfig: {            singleLineBreaks: false,            codeSyntaxHighlighting: true,        },        shortcuts: {            drawTable: "Cmd-Alt-T"        },        showIcons: ["code", "table"],        spellChecker: false,        status: false,        status: ["autosave", "lines", "words", "cursor"], // Optional usage        status: ["autosave", "lines", "words", "cursor", {            className: "keystrokes",            defaultValue: function (el) {                this.keystrokes = 0;                el.innerHTML = "0 Keystrokes";            },            onUpdate: function (el) {                el.innerHTML = ++this.keystrokes + " Keystrokes";            }        }], // Another optional usage, with a custom status bar item that counts keystrokes        styleSelectedText: false,        tabSize: 4,                    });</script>